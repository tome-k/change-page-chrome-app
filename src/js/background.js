// Generated by CoffeeScript 1.7.1
var lastTabs, lastWindow, paddingBottom, paddingTop, serialize, switcherWidth,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

lastTabs = {};

paddingTop = 50;

paddingBottom = 50;

switcherWidth = 600;

lastWindow = null;

chrome.storage.local.get('lastTabs', function(data) {
  console.log('data', data);
  return chrome.windows.getAll(function(windows) {
    var id, ids, _, _ref;
    lastTabs = JSON.parse(data.lastTabs);
    ids = windows.map(function(win) {
      return win.id.toString();
    });
    for (id in lastTabs) {
      _ = lastTabs[id];
      if (_ref = id.toString(), __indexOf.call(ids, _ref) < 0) {
        delete lastTabs[id];
      }
    }
    return console.log(lastTabs);
  });
});

serialize = function() {
  console.log('serializing');
  return chrome.storage.local.set({
    lastTabs: JSON.stringify(lastTabs)
  });
};

chrome.runtime.onSuspend.addListener(function() {
  return serialize();
});

chrome.tabs.onActivated.addListener(function(_arg) {
  var tabId, windowId, _results;
  tabId = _arg.tabId, windowId = _arg.windowId;
  if (lastTabs[windowId] == null) {
    lastTabs[windowId] = [null];
  }
  lastTabs[windowId].push(tabId);
  _results = [];
  while (lastTabs[windowId].length > 2) {
    _results.push(lastTabs[windowId].shift());
  }
  return _results;
});

chrome.windows.onRemoved.addListener(function(windowId) {
  return delete lastTabs[windowId];
});

chrome.commands.onCommand.addListener(function(command) {
  if (command === "show-tab-switcher") {
    return chrome.windows.getCurrent(function(currentWindow) {
      var width, windowOpts;
      lastWindow = currentWindow;
      width = currentWindow.width - 200;
      width = Math.min(600, width);
      windowOpts = {
        url: chrome.runtime.getURL('src/html/test.html'),
        left: Math.max(0, currentWindow.left + Math.round((currentWindow.width - switcherWidth) / 2)),
        top: Math.max(0, currentWindow.top + paddingTop),
        width: switcherWidth,
        height: Math.max(currentWindow.height - paddingTop - paddingBottom, 600),
        focused: true,
        type: 'popup'
      };
      return chrome.windows.create(windowOpts);
    });
  }
});

chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
  if (request.switchToTabId) {
    chrome.tabs.update(request.switchToTabId, {
      active: true
    });
  }
  if (request.sendTabData) {
    return chrome.tabs.query({
      windowId: lastWindow.id
    }, function(tabs) {
      var data;
      data = {
        tabs: tabs,
        lastActive: (lastTabs[lastWindow.id] || [])[0]
      };
      return chrome.tabs.sendMessage(sender.tab.id, data);
    });
  }
});
